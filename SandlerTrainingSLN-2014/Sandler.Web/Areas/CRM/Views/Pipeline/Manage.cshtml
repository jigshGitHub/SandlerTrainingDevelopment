@using Sandler.Web.ViewModels;
@using Sandler.DB.Models;
@model EntityViewModel<TBL_OPPORTUNITIES>

<div id="container">
    <div class="row">
        <div class="col-sm-3">
            Company
        </div>
        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.companyName, visible: isVisible" />
            <select data-bind="options: companies, optionsCaption: ' ',optionsText: 'name', optionsValue: 'id', value: opportunity.COMPANYID, visible: isEditable"></select>
            <span class="label label-danger" data-bind='visible: opportunity.COMPANYID.hasError, text: opportunity.COMPANYID.validationMessage'></span>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Contacts
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: primaryContact, visible: isVisible" />
            <select data-bind="    options: companyContacts, optionsText: 'fullName', optionsValue: 'contactsId', visible: isEditable,selectedOptions:contactsSelected" multiple="true"></select><br />
            <span class="label label-danger" data-bind='visible: opportunity.CONTACTID.hasError, text: opportunity.CONTACTID.validationMessage'></span>
            <span data-bind="text: secondaryContact1, visible: isVisible" />
            <br />
            <span data-bind="text: secondaryContact2, visible: isVisible" />
            <br />
        </div>
    </div>
    <div class="row" data-bind="visible: !isNewOpportunity">
        <div class="col-sm-3">
            Opportunity ID
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.ID, visible: isVisible" />
            <input data-bind="value: opportunity.ID, visible: isEditable" disabled="disabled" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Opportunity Name
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.NAME, visible: isVisible" />
            <input data-bind="value: opportunity.NAME, visible: isEditable" />
            <span class="label label-danger" data-bind='visible: opportunity.NAME.hasError, text: opportunity.NAME.validationMessage'></span>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Opportunity Description
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.Description, visible: isVisible" />
            <input data-bind="value: opportunity.Description, visible: isEditable" textmode="MultiLine" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Opportunity Notes
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.Notes, visible: isVisible" />
            <input data-bind="value: opportunity.Notes, visible: isEditable" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Sales Rep Last Name
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.SALESREPLASTNAME, visible: isVisible" />
            <input data-bind="value: opportunity.SALESREPLASTNAME, visible: isEditable" />
            <span class="label label-danger" data-bind='visible: opportunity.SALESREPLASTNAME.hasError, text: opportunity.SALESREPLASTNAME.validationMessage'></span>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Sales Rep First Name
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.SALESREPFIRSTNAME, visible: isVisible" />
            <input data-bind="value: opportunity.SALESREPFIRSTNAME, visible: isEditable" />
            <span class="label label-danger" data-bind='visible: opportunity.SALESREPFIRSTNAME.hasError, text: opportunity.SALESREPFIRSTNAME.validationMessage'></span>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Sales Rep Phone
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.SALESREPPHONE, visible: isVisible" />
            <input data-bind="value: opportunity.SALESREPPHONE, visible: isEditable" />
        </div>
    </div>

    <div class="row">
        <div class="col-sm-3">
            Product
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.productName, visible: isVisible" />
            <select data-bind="options: products, optionsCaption:'',optionsText: 'ProductTypeName', optionsValue: 'Id', value: opportunity.ProductID, visible: isEditable"></select>
            <span class="label label-danger" data-bind='visible: opportunity.ProductID.hasError, text: opportunity.ProductID.validationMessage'></span>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Product Cost
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.ProductCost, visible: isVisible" />
            <input data-bind="value: opportunity.ProductCost, visible: isEditable" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Opportunity Status
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.oppStatus, visible: isVisible" />
            <select data-bind="options: oppStatus, optionsText: 'Name', optionsValue: 'ID', value: opportunity.STATUSID, visible: isEditable"></select>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Opportunity Source
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.oppSource, visible: isVisible" />
            <select data-bind="options: oppSources, optionsText: 'Name', optionsValue: 'ID', value: opportunity.SourceID, visible: isEditable"></select>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Opportunity Type
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.type, visible: isVisible" />
            <select data-bind="options: oppTypes, optionsText: 'Name', optionsValue: 'ID', value: opportunity.TypeID, visible: isEditable"></select>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Why Lost?
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.whyLost, visible: isVisible" />
            <select data-bind="options: whyLosts, optionsText: 'Name', optionsValue: 'ID', value: opportunity.WhyLostID, visible: isEditable"></select>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Opportunity Value
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.VALUE, visible: isVisible" />
            <input data-bind="value: opportunity.VALUE, visible: isEditable" />
            <span class="label label-danger" data-bind='visible: opportunity.VALUE.hasError, text: opportunity.VALUE.validationMessage'></span>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Win Probability %
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.WINPROBABILITY, visible: isVisible" />
            <input data-bind="value: opportunity.WINPROBABILITY, visible: isEditable" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Weighted Value
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.WEIGHTEDVALUE, visible: isVisible" />
            <input data-bind="value: opportunity.WEIGHTEDVALUE, visible: isEditable" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Actual Value
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.ActualValue, visible: isVisible" />
            <input data-bind="value: opportunity.ActualValue, visible: isEditable" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Creation Date
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.CreationDateC, visible: isVisible" />
            <input data-bind="kendoDatePicker: { value: opportunity.CreationDateC, format: 'MM/dd/yyyy', visible: isEditable }" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Close Date
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.CLOSEDATEc, visible: isVisible" />
            <input data-bind="kendoDatePicker: { value: opportunity.CLOSEDATEc, format: 'MM/dd/yyyy', visible: isEditable }" />
            <span class="label label-danger" data-bind='visible: opportunity.CLOSEDATEc.hasError, text: opportunity.CLOSEDATEc.validationMessage'></span>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Pain
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.Pain, visible: isVisible" />
            <input data-bind="value: opportunity.Pain, visible: isEditable" />
            <span class="label label-danger" data-bind='visible: opportunity.Pain.hasError, text: opportunity.Pain.validationMessage'></span>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Length of Problem
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.LengthOfProblem, visible: isVisible" />
            <input data-bind="value: opportunity.LengthOfProblem, visible: isEditable" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Alternatives
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.Alternatives, visible: isVisible" />
            <input data-bind="value: opportunity.Alternatives, visible: isEditable" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Cost to Fix
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.CostToFix, visible: isVisible" />
            <input data-bind="value: opportunity.CostToFix, visible: isEditable" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Budget Identified?
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.budget, visible: isVisible" />
            <select data-bind="options: budgetIdentified, optionsText: 'Description', optionsValue: 'Value', value: opportunity.IsBudgeIdentified, visible: isEditable"></select>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Move Forward?
        </div>

        <div class="col-sm-9">
            :
            <span data-bind="text: opportunity.moveForward, visible: isVisible" />
            <select data-bind="options: moveForward, optionsText: 'Description', optionsValue: 'Value', value: opportunity.IsMoveForward, visible: isEditable"></select>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            <input type="button" value="Edit" data-bind="click: makeEditable, visible: isVisible" />
            <input type="button" value="Save" data-bind="click: save, visible: saveVisible" />
        </div>
    </div>
</div>

<script type="text/javascript" src="~/Scripts/Application/koExtenders.js"></script>
<script type="text/javascript">

    var startModule = sandler.appStart.module;
    var pageVM = function (opportunityObservable) {
        var self = this;
        self.isNewOpportunity = ko.observable(false);
        self.opportunity = opportunityObservable;
        if (self.opportunity.ID() == 0)
            self.isNewOpportunity(true);
        
        if (self.opportunity.CreationDate != null && self.opportunity.CreationDate() != "") {
            self.opportunity.CreationDateC = ko.observable(kendo.parseDate(self.opportunity.CreationDate()));
        }
        else {
            self.opportunity.CreationDateC = ko.observable('');
        }
        if (self.opportunity.CLOSEDATE() != null && self.opportunity.CLOSEDATE() != "") {
            self.opportunity.CLOSEDATEc = ko.observable(kendo.parseDate(self.opportunity.CLOSEDATE()));
        }
        else {
            self.opportunity.CLOSEDATEc = ko.observable('');
        }

        self.opportunity.COMPANYID.extend({ required: "*" });
        self.opportunity.NAME.extend({ required: "*" });
        self.opportunity.SALESREPLASTNAME.extend({ required: "*" });
        self.opportunity.SALESREPFIRSTNAME.extend({ required: "*" });
        self.opportunity.ProductID.extend({ required: "*" });
        self.opportunity.VALUE.extend({ required: "*" });
        self.opportunity.CLOSEDATEc.extend({ required: "*" });
        self.opportunity.Pain.extend({ required: "*" });

        self.opportunity.companyName = ko.computed(function () {
            return startModule.getCompanyName(self.opportunity.COMPANYID());
        }, self);
        self.opportunity.productName = ko.computed(function () {
            return startModule.getProductName(self.opportunity.ProductID());
        }, self);
        self.opportunity.oppStatus = ko.computed(function () {
            return startModule.getOpportunityStatusName(self.opportunity.STATUSID());
        }, self);
        self.opportunity.oppSource = ko.computed(function () {
            return startModule.getOpportunitySourcesName(self.opportunity.SourceID());
        }, self);
        self.opportunity.type = ko.computed(function () {
            return startModule.getOpportunityTypesName(self.opportunity.TypeID());
        }, self);
        self.opportunity.whyLost = ko.computed(function () {
            return startModule.getOpportunityWhyLostsName(self.opportunity.WhyLostID());
        }, self);
        self.opportunity.budget = ko.computed(function () {
            return startModule.getYesNo(self.opportunity.IsBudgeIdentified());
        }, self);
        self.opportunity.moveForward = ko.computed(function () {
            return startModule.getYesNo(self.opportunity.IsMoveForward());
        }, self);
        self.companies = startModule.getUserCompanies();
        self.products = startModule.getProductTypes();
        self.whyLosts = startModule.getOpportunityWhyLosts();
        self.oppStatus = startModule.getOpportunityStatus();
        self.oppSources = startModule.getOpportunitySources();
        self.oppTypes = startModule.getOpportunityTypes();
        self.budgetIdentified = startModule.getYesNoOptions();
        self.moveForward = startModule.getYesNoOptions();

        self.contactsSelected = ko.observableArray([]);
        self.resetContactSelection = function () {
            self.contactsSelected([]);
            self.opportunity.CONTACTID('');
            self.opportunity.SeconadryContactId1('');
            self.opportunity.SeconadryContactId2('');
        };
        self.companyContacts = ko.computed(function () {
            var localCompanyContacts = '';
            //console.log('self.opportunity.COMPANYID()');
            //console.log(self.opportunity.COMPANYID());
            if (self.opportunity.COMPANYID() > 0) {
                self.resetContactSelection();
                localCompanyContacts = startModule.getUserContactsByCompany(self.opportunity.COMPANYID())
                if (localCompanyContacts.length == 0) {
                    showNoti_.error('Create contacts for the company selected.', false);
                }
            }
            return localCompanyContacts;
        }, self);
        self.primaryContact = ko.computed(function () {
            var fullName = '';
            $.each(self.companyContacts(), function (i, contactRecord) {
                if (parseInt(contactRecord.contactsId) == parseInt(self.opportunity.CONTACTID())) {
                    fullName = contactRecord.fullName;
                    return false;
                }
            });
            //console.log('fullName');
            //console.log(fullName);
            return fullName;
        }, self);
        self.secondaryContact1 = ko.computed(function () {
            var fullName = '';
            $.each(self.companyContacts(), function (i, contactRecord) {
                if (parseInt(contactRecord.contactsId) == parseInt(self.opportunity.SeconadryContactId1())) {
                    fullName = contactRecord.fullName;
                    return false;
                }
            });
            return fullName;
        }, self);
        self.secondaryContact2 = ko.computed(function () {
            var fullName = '';
            $.each(self.companyContacts(), function (i, contactRecord) {
                if (parseInt(contactRecord.contactsId) == parseInt(self.opportunity.SeconadryContactId2())) {
                    fullName = contactRecord.fullName;
                    return false;
                }
            });
            return fullName;
        }, self);

        self.isVisible = ko.observable(false);
        self.isEditable = ko.observable(true);
        self.makeEditable = function () {
            self.isEditable(true);
            self.isVisible(false);
            //self.saveVisible(true);
        };
        self.saveVisible = ko.computed(function () { return self.isEditable(); }, self);
        self.save = function () {
            //if (!self.opportunity.COMPANYID()) {
            //    showNoti_.error('Please select a company first.', false);
            //    return;
            //}
            //console.log('self.contactsSelected().length()')
            //console.log(self.contactsSelected().length);
            if (self.contactsSelected().length == 0) {
                showNoti_.error('Please select at least one contact from the list OR make sure there are contact created for the company selected.', false);
                return;
            }
            else if (self.contactsSelected().length > 3) {
                showNoti_.error('Please select maximum 3 contacts from the list.', false);
                return;
            }
            else {
                self.opportunity.CONTACTID(self.contactsSelected()[0]);
                if (self.contactsSelected().length > 1) self.opportunity.SeconadryContactId1(self.contactsSelected()[1]);
                if (self.contactsSelected().length > 2) self.opportunity.SeconadryContactId2(self.contactsSelected()[2]);
                //console.log('self.opportunity.SeconadryContactId1():' + self.opportunity.SeconadryContactId1());
                //console.log('self.opportunity.SeconadryContactId2():' + self.opportunity.SeconadryContactId2());
                
            }
            if (!self.opportunity.NAME()) {
                showNoti_.error('Opportunity name is required.', false);
                return;
            }
            if (!self.opportunity.SALESREPLASTNAME()) {
                showNoti_.error('Lastname of sales representative is required', false);
                return;
            }
            if (!self.opportunity.SALESREPFIRSTNAME()) {
                showNoti_.error('Firstname of sales representative is required', false);
                return;
            }
            if (!self.opportunity.ProductID()) {
                showNoti_.error('Product selection is required', false);
                return;
            }
            if (!self.opportunity.VALUE()) {
                showNoti_.error('Value of opportunity is required', false);
                return;
            }
            if (!self.opportunity.CLOSEDATEc()) {
                showNoti_.error('Close date is required', false);
                return;
            }
            if (!self.opportunity.Pain()) {
                showNoti_.error('Pain is required', false);
                return;
            }
            self.opportunity.CLOSEDATE(self.opportunity.CLOSEDATEc());
            self.opportunity.CreationDate(self.opportunity.CreationDateC());
            $.ajax({
                url: 'api/PipelineSave',
                type: "POST",
                data: ko.toJSON(self.opportunity),
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                async: false,
                success: function (response) {
                    console.log('save pipeline');
                    showNoti_.info('Pipeline saved successfully.', true);
                },
                error: function (response, errorText) {
                    showNoti_.error('Unable to save pipeline, server error occures.', true);
                    return false;
                }
            });
        }
    }
    $(document).ready(function () {
        var vm = new pageVM(ko.mapping.fromJS( @Html.Raw(Json.Encode(@Model.EntityModel))));
        //console.log(vm.opportunity);
        ko.applyBindings(vm, document.getElementById("container"));

    });
</script>
